# -*- coding: utf-8 -*-
"""Rifky_Maulana_Project_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NySRNro5LEbEVXAk2z4BTn0OFad-3qbU

#Import Library
"""

import gdown
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from tqdm import tqdm
import pandas as pd
import warnings
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import warnings
from tqdm import tqdm
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")

"""# Load Dataset"""

# Ganti dengan ID asli dari file kamu
dataset = '1zvE4-Y_CYMYANs1mqS6A1qawySsYODZd'

url_dataset = f'https://drive.google.com/uc?id={dataset}'

gdown.download(url_dataset, 'Dataset.csv', quiet=False)

"""# Data Understanding dab=n EDA"""

dataset= pd.read_csv('Dataset.csv')
dataset.head()

dataset.info()

dataset.describe(include='all')

# 1. Genre paling sering muncul
plt.figure(figsize=(10, 5))
top_genres = dataset['genre'].value_counts().head(10)
sns.barplot(x=top_genres.index, y=top_genres.values)
plt.title("10 Genre Terbanyak")
plt.xticks(rotation=45)
plt.ylabel("Jumlah")
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='year', data=dataset, order=dataset['year'].value_counts().index.sort_values())
plt.xticks(rotation=90)
plt.title('Jumlah Film per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Jumlah Film')
plt.show()

"""#Data Preparation"""

# Ganti NaN dengan string kosong
dataset['description'] = dataset['description'].fillna('')
dataset['genre'] = dataset['genre'].fillna('')

# Gabungkan konten untuk fitur text
dataset['combined_features'] = dataset['description'] + ' ' + dataset['genre']

dataset.info()

"""# Build Model dan Algoritma"""

# Build Content-Based Recommender
class MovieRecommender:
    def __init__(self):
        self.tfidf = TfidfVectorizer(max_features=1000, stop_words='english')
        self.cosine_sim = None
        self.df = None
        self.indices = None
        # Add an attribute to store the tfidf matrix
        self.tfidf_matrix = None

    def fit(self, df):
        self.df = df
        # Store the tfidf matrix as a class attribute
        self.tfidf_matrix = self.tfidf.fit_transform(df['combined_features'])
        self.cosine_sim = cosine_similarity(self.tfidf_matrix, self.tfidf_matrix)
        self.indices = pd.Series(df.index, index=df['title']).drop_duplicates()

    def get_recommendations(self, title, n_recommendations=10):
        idx = self.indices[title]
        sim_scores = list(enumerate(self.cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:n_recommendations+1]
        movie_indices = [i[0] for i in sim_scores]
        return self.df.iloc[movie_indices][['title', 'genre', 'users_rating']]

# Train Model
recommender = MovieRecommender()
recommender.fit(dataset)
print("✅ Model berhasil dilatih!")

# Test Recommendation
# Ambil film pertama sebagai contoh
sample_movie = dataset['title'].iloc[0]
print(f"Film: {sample_movie}")
print("\nRekomendasi:")
recommendations = recommender.get_recommendations(sample_movie, 5)
print(recommendations)

from sklearn.neighbors import NearestNeighbors

model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
# Access the stored tfidf_matrix from the recommender object
model_knn.fit(recommender.tfidf_matrix)

"""# Evaluation Model"""

# Model Evaluation
def evaluate_model(df):
    """
    Evaluasi dengan metode Rating Prediction
    - Ambil film dengan rating tinggi
    - Cek apakah rekomendasi juga punya rating tinggi
    """
    print("Melakukan evaluasi rating prediction...")

    # Ambil 100 film random untuk evaluasi
    test_movies = df.sample(100, random_state=42)

    predictions = []
    actuals = []

    for _, movie in test_movies.iterrows():
        try:
            # Dapatkan rekomendasi
            recs = recommender.get_recommendations(movie['title'], 5)

            if len(recs) > 0:
                # Prediksi = rata-rata rating dari 5 rekomendasi teratas
                pred_rating = recs['users_rating'].mean()
                actual_rating = movie['users_rating']

                predictions.append(pred_rating)
                actuals.append(actual_rating)
        except:
            continue

    print(f"✅ Berhasil evaluasi {len(predictions)} film")

    # Hitung metrik evaluasi
    mse = mean_squared_error(actuals, predictions)
    mae = mean_absolute_error(actuals, predictions)
    rmse = np.sqrt(mse)

    # Hitung accuracy (prediksi dalam range ±0.5 dari actual)
    accurate_preds = sum(1 for a, p in zip(actuals, predictions) if abs(a - p) <= 0.5)
    accuracy = accurate_preds / len(predictions) * 100

    print(f"📊 HASIL EVALUASI:")
    print(f"   MSE: {mse:.4f}")
    print(f"   MAE: {mae:.4f}")
    print(f"   RMSE: {rmse:.4f}")
    print(f"   Accuracy (±0.5): {accuracy:.1f}%")

    return mse, mae, rmse, accuracy, predictions, actuals

# Run Evaluation
print("🔍 Evaluasi Model:")
mse, mae, rmse, accuracy, predictions, actuals = evaluate_model(dataset)

# Plot evaluasi
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plt.scatter(actuals, predictions, alpha=0.6)
plt.plot([min(actuals), max(actuals)], [min(actuals), max(actuals)], 'r--')
plt.xlabel('Actual Rating')
plt.ylabel('Predicted Rating')
plt.title('Actual vs Predicted')

plt.subplot(1, 3, 2)
residuals = np.array(actuals) - np.array(predictions)
plt.hist(residuals, bins=15, alpha=0.7)
plt.xlabel('Residuals')
plt.title('Distribution of Errors')

plt.subplot(1, 3, 3)
plt.bar(['MSE', 'MAE', 'RMSE'], [mse, mae, rmse])
plt.title('Evaluation Metrics')
plt.ylabel('Error Value')

plt.tight_layout()
plt.show()

print(f"🎯 Model Performance: Accuracy {accuracy:.1f}%")

"""# Test Sistem"""

# Interactive Recommendation Function
def recommend_movie(title, n=5):
    try:
        recs = recommender.get_recommendations(title, n)
        print(f"📽️ Rekomendasi untuk '{title}':")
        for i, (_, row) in enumerate(recs.iterrows(), 1):
            print(f"{i}. {row['title']} - {row['genre']} - Rating: {row['users_rating']}")
    except:
        print("❌ Film tidak ditemukan")

# Test Interactive Function
# Contoh penggunaan
print("Contoh rekomendasi:")
recommend_movie(dataset['title'].iloc[10], 5)

# Summary
print("\n📊 RINGKASAN SISTEM REKOMENDASI")
print(f"• Dataset: {len(dataset)} film")
print(f"• Metode: Content-Based Filtering")
print(f"• Evaluasi: MSE={mse:.3f}, MAE={mae:.3f}, RMSE={rmse:.3f}")
print(f"• Akurasi: {accuracy:.1f}%")
print(f"• Status: ✅ Siap digunakan")