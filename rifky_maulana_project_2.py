# -*- coding: utf-8 -*-
"""Rifky_Maulana_Project_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NySRNro5LEbEVXAk2z4BTn0OFad-3qbU

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Rifky Maulana Pasaribu
- Email: rifkymp0@gmail.com
- Id Dicoding:

#Import Library

Cell ini bertanggung jawab untuk mengimpor semua pustaka (libraries) Python yang akan digunakan di sepanjang notebook ini. Pustaka-pustaka ini menyediakan fungsionalitas esensial untuk berbagai tahapan dalam proyek, mulai dari manipulasi data, pemrosesan teks, hingga pembangunan model dan visualisasi
"""

import gdown
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from tqdm import tqdm
import pandas as pd
import warnings
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import warnings
from tqdm import tqdm
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error, mean_absolute_error
import matplotlib.pyplot as plt
warnings.filterwarnings("ignore")
from sklearn.neighbors import NearestNeighbors

"""# Load Dataset

Cell ini bertanggung jawab untuk mengunduh dataset yang diperlukan untuk analisis dari Google Drive. Dataset ini diidentifikasi menggunakan ID uniknya, dan kemudian diunduh ke lingkungan runtime Google Colab atau lingkungan lokal sebagai file CSV dengan nama Dataset.csv.
"""

# Ganti dengan ID asli dari file kamu
dataset = '1zvE4-Y_CYMYANs1mqS6A1qawySsYODZd'

url_dataset = f'https://drive.google.com/uc?id={dataset}'

gdown.download(url_dataset, 'Dataset.csv', quiet=False)

"""# Data Understanding dan EDA

Cell ini adalah titik masuk ke dalam fase Data Understanding dan Exploratory Data Analysis (EDA). Tujuan utamanya adalah untuk memuat dataset yang telah diunduh (Dataset.csv) ke dalam struktur data yang dapat dioperasikan (Pandas DataFrame) dan selanjutnya melakukan inspeksi awal untuk memahami karakteristik dasar, struktur, dan potensi masalah pada data sebelum tahapan pra-pemrosesan lebih lanjut
"""

# menampilkan 5 data teratass
dataset= pd.read_csv('Dataset.csv')
dataset.head()

dataset.info()

dataset.describe(include='all')

# Genre paling sering muncul
plt.figure(figsize=(10, 5))
top_genres = dataset['genre'].value_counts().head(10)
sns.barplot(x=top_genres.index, y=top_genres.values)
plt.title("10 Genre Terbanyak")
plt.xticks(rotation=45)
plt.ylabel("Jumlah")
plt.show()

# Menalmpilkan jumplah film pertahun
plt.figure(figsize=(12, 6))
sns.countplot(x='year', data=dataset, order=dataset['year'].value_counts().index.sort_values())
plt.xticks(rotation=90)
plt.title('Jumlah Film per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Jumlah Film')
plt.show()

"""#Data Preparation

Cell ini adalah bagian awal dari tahapan Data Preparation, berfokus pada penanganan nilai-nilai yang hilang (NaN) pada kolom teks kunci dan rekayasa fitur dengan menggabungkan beberapa kolom teks menjadi satu fitur gabungan. Langkah-langkah ini penting untuk memastikan data siap untuk pemrosesan teks lebih lanjut (misalnya, vectorization) dan model tidak mengalami error karena nilai kosong atau format data yang terpisah.
"""

# Ganti NaN dengan string kosong
dataset['description'] = dataset['description'].fillna('')
dataset['genre'] = dataset['genre'].fillna('')

# Gabungkan konten untuk fitur text
dataset['combined_features'] = dataset['description'] + ' ' + dataset['genre']

# Buat TF-IDF matrix di Data Preparation
from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(max_features=1000, stop_words='english')
tfidf_matrix = tfidf.fit_transform(dataset['combined_features'])

# Hitung cosine similarity
from sklearn.metrics.pairwise import cosine_similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Buat mapping indices untuk judul film
indices = pd.Series(dataset.index, index=dataset['title']).drop_duplicates()

dataset.info()

"""# Build Model dan Algoritma

Cell ini mendefinisikan dan mengimplementasikan kelas MovieRecommender yang merupakan inti dari sistem rekomendasi berbasis konten. Kelas ini menggunakan fitur teks gabungan (combined_features) untuk membangun representasi TF-IDF dari film dan kemudian menghitung kesamaan kosinus antar film. Selanjutnya, kelas ini menyediakan metode untuk menghasilkan rekomendasi berdasarkan judul film yang diberikan. Di bagian bawah cell, kelas ini diinisialisasi, dan dilatih.
"""

class MovieRecommender:
    def __init__(self):
        """
        Initialize recommender
        """
        self.cosine_sim = None
        self.indices = None
        self.df = None

    def fit(self, df):
        """
        Fit model dengan dataset yang sudah dipreprocess
        """
        self.df = df
        # Menggunakan TF-IDF matrix dan cosine similarity yang sudah dibuat di Data Preparation
        self.cosine_sim = cosine_sim
        self.indices = indices

    def get_recommendations(self, title, n_recommendations=10):
        """
        Dapatkan rekomendasi berdasarkan judul film
        """
        try:
            # Dapatkan index dari judul film
            idx = self.indices[title]

            # Dapatkan similarity scores
            sim_scores = list(enumerate(self.cosine_sim[idx]))

            # Sort berdasarkan similarity score
            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

            # Ambil top n recommendations (skip index 0 karena itu film itu sendiri)
            sim_scores = sim_scores[1:n_recommendations+1]

            # Dapatkan movie indices
            movie_indices = [i[0] for i in sim_scores]

            # Return judul, genre, dan rating film yang direkomendasikan
            return self.df.iloc[movie_indices][['title', 'genre', 'users_rating']]

        except KeyError:
            return f"Film '{title}' tidak ditemukan dalam dataset"

# Inisialisasi recommender
recommender = MovieRecommender()
recommender.fit(dataset)
print("✅ Model berhasil dilatih!")

# ========================================
# Test Recommendation

# Ambil film pertama sebagai contoh
sample_movie = dataset['title'].iloc[0]
print(f"Film: {sample_movie}")
print("\nRekomendasi:")
recommendations = recommender.get_recommendations(sample_movie, 5)
print(recommendations)

# Gunakan tfidf_matrix yang sudah dibuat di Data Preparation
model_knn = NearestNeighbors(metric='cosine', algorithm='brute')
model_knn.fit(tfidf_matrix)

"""# Evaluation Model

Cell ini mendefinisikan fungsi evaluate_model(df) yang bertujuan untuk mengevaluasi kinerja sistem rekomendasi dari perspektif "prediksi rating". Meskipun sistem rekomendasi berbasis konten biasanya tidak secara eksplisit "memprediksi" rating, pendekatan ini mencoba mengukur seberapa baik rekomendasi yang diberikan memiliki rating pengguna yang tinggi, mengindikasikan kualitas rekomendasi. Fungsi ini mengambil sampel film secara acak, mendapatkan rekomendasi untuk setiap film tersebut, dan kemudian menghitung Mean Squared Error (MSE), Mean Absolute Error (MAE), dan Root Mean Squared Error (RMSE) antara rata-rata rating dari rekomendasi dan rating asli film yang menjadi dasar rekomendasi.
"""

# Model Evaluation
def evaluate_model(df):
    """
    Evaluasi dengan metode Rating Prediction
    - Ambil film dengan rating tinggi
    - Cek apakah rekomendasi juga punya rating tinggi
    """
    print("Melakukan evaluasi rating prediction...")

    # Ambil 100 film random untuk evaluasi
    test_movies = df.sample(100, random_state=42)

    predictions = []
    actuals = []

    for _, movie in test_movies.iterrows():
        try:
            # Dapatkan rekomendasi
            recs = recommender.get_recommendations(movie['title'], 5)

            if len(recs) > 0:
                # Prediksi = rata-rata rating dari 5 rekomendasi teratas
                pred_rating = recs['users_rating'].mean()
                actual_rating = movie['users_rating']

                predictions.append(pred_rating)
                actuals.append(actual_rating)
        except:
            continue

    print(f"✅ Berhasil evaluasi {len(predictions)} film")

    # Hitung metrik evaluasi
    mse = mean_squared_error(actuals, predictions)
    mae = mean_absolute_error(actuals, predictions)
    rmse = np.sqrt(mse)

    # Hitung accuracy (prediksi dalam range ±0.5 dari actual)
    accurate_preds = sum(1 for a, p in zip(actuals, predictions) if abs(a - p) <= 0.5)
    accuracy = accurate_preds / len(predictions) * 100

    print(f"📊 HASIL EVALUASI:")
    print(f"   MSE: {mse:.4f}")
    print(f"   MAE: {mae:.4f}")
    print(f"   RMSE: {rmse:.4f}")
    print(f"   Accuracy (±0.5): {accuracy:.1f}%")

    return mse, mae, rmse, accuracy, predictions, actuals

# Run Evaluation
print("🔍 Evaluasi Model:")
mse, mae, rmse, accuracy, predictions, actuals = evaluate_model(dataset)

# Plot evaluasi
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
plt.scatter(actuals, predictions, alpha=0.6)
plt.plot([min(actuals), max(actuals)], [min(actuals), max(actuals)], 'r--')
plt.xlabel('Actual Rating')
plt.ylabel('Predicted Rating')
plt.title('Actual vs Predicted')

plt.subplot(1, 3, 2)
residuals = np.array(actuals) - np.array(predictions)
plt.hist(residuals, bins=15, alpha=0.7)
plt.xlabel('Residuals')
plt.title('Distribution of Errors')

plt.subplot(1, 3, 3)
plt.bar(['MSE', 'MAE', 'RMSE'], [mse, mae, rmse])
plt.title('Evaluation Metrics')
plt.ylabel('Error Value')

plt.tight_layout()
plt.show()

print(f"🎯 Model Performance: Accuracy {accuracy:.1f}%")

"""# Test Sistem

## Deskripsi:
Cell ini memiliki dua tujuan utama:

1. Membangun Fungsi Rekomendasi Interaktif: Mendefinisikan fungsi recommend_movie yang memungkinkan pengguna mendapatkan rekomendasi film dengan mudah hanya dengan memberikan judul film dan jumlah rekomendasi yang diinginkan. Fungsi ini juga menangani kasus di mana film tidak ditemukan.

2. Menguji Fungsi Interaktif & Memberikan Ringkasan Model: Menguji fungsi recommend_movie dengan contoh konkret dan kemudian menyajikan ringkasan singkat tentang sistem rekomendasi, termasuk ukuran dataset, metode yang digunakan, dan metrik evaluasi yang telah dihitung sebelumnya.
"""

# Interactive Recommendation Function
def recommend_movie(title, n=5):
    try:
        recs = recommender.get_recommendations(title, n)
        print(f"📽️ Rekomendasi untuk '{title}':")
        for i, (_, row) in enumerate(recs.iterrows(), 1):
            print(f"{i}. {row['title']} - {row['genre']} - Rating: {row['users_rating']}")
    except:
        print("❌ Film tidak ditemukan")

# Test Interactive Function
# Contoh penggunaan
print("Contoh rekomendasi:")
recommend_movie(dataset['title'].iloc[10], 5)

# Summary
print("\n📊 RINGKASAN SISTEM REKOMENDASI")
print(f"• Dataset: {len(dataset)} film")
print(f"• Metode: Content-Based Filtering")
print(f"• Evaluasi: MSE={mse:.3f}, MAE={mae:.3f}, RMSE={rmse:.3f}")
print(f"• Akurasi: {accuracy:.1f}%")
print(f"• Status: ✅ Siap digunakan")